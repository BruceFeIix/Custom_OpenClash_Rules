import os
import io

root_path = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))

custom_direct_list = os.path.join(root_path, "rule", "Custom_Direct.list")
custom_direct_merge_list = os.path.join(
    root_path, "rule", "Custom_Direct_Merge.list"
)
custom_direct_full_list = os.path.join(
    root_path, "rule", "Custom_Direct_Full.list"
)

custom_proxy_list = os.path.join(root_path, "rule", "Custom_Proxy.list")
custom_proxy_merge_list = os.path.join(
    root_path, "rule", "Custom_Proxy_Merge.list"
)
custom_proxy_full_list = os.path.join(
    root_path, "rule", "Custom_Proxy_Full.list"
)

custom_clash_cfg = os.path.join(root_path, "cfg", "Custom_Clash_Mainland.ini")
custom_clash_cfg_a1_node = os.path.join(
    root_path, "cfg", "Custom_Clash_A1_Node.ini"
)
custom_clash_opt_cfg = os.path.join(root_path, "cfg", "Custom_Clash_Opt.ini")


def read_rule_file(file_path):
    """读取规则文件，跳过注释和空行"""
    with open(file_path, "r", encoding="utf-8") as f:
        return [
            line if line.endswith("\n") else line + "\n"
            for line in f.readlines()
            if line and not line.lstrip().startswith("#")
        ]


def write_merged_rules(output_path, rule_list, list_name):
    """将合并后的规则写入文件"""
    with open(output_path, "w", encoding="utf-8") as f:
        f.write(f"# Custom {list_name} Full List\n")
        f.write("# Generated by tools/generate.py\n")
        f.write("# Do not edit this file manually\n")
        f.writelines(rule_list)


def merge_rule_lists(main_list_path, merge_list_path, output_path, list_name):
    """合并两个规则列表并输出到新文件"""
    main_rules = read_rule_file(main_list_path)
    merge_rules = read_rule_file(merge_list_path)

    # 合并并去重
    merged_rules = list(set(main_rules + merge_rules))
    merged_rules.sort()

    write_merged_rules(output_path, merged_rules, list_name)


def main():
    # 生成直连规则合并列表
    merge_rule_lists(
        custom_direct_list,
        custom_direct_merge_list,
        custom_direct_full_list,
        "Direct",
    )

    # 生成代理规则合并列表
    merge_rule_lists(
        custom_proxy_list,
        custom_proxy_merge_list,
        custom_proxy_full_list,
        "Proxy",
    )

    # 生成 Clash 配置文件
    # with open(custom_clash_cfg, "r", encoding="utf-8") as f:
    #     clash_rules = f.readlines()

    with open(custom_clash_cfg_a1_node, "r", encoding="utf-8") as f:
        clash_a1_rules = []
        node_names = []
        for line in f.readlines():
            if not line.lstrip().startswith("custom_proxy_group"):
                continue
            node_name = line.split("=")[1].split("`")[0].strip()
            node_names.append(node_name)
            clash_a1_rules.append(line)

    result_rules = []
    custom_flag = False
    with open(custom_clash_cfg, "r", encoding="utf-8") as f:
        raw_rules = f.readlines()
        last_is_custom_proxy_group = None
        insert_node_names_index = 0
        for rule in raw_rules:
            if rule.lstrip().startswith(";") and not custom_flag:
                # Skip comments at the beginning of the file
                continue
            if rule.strip() == "[custom]":
                custom_flag = (
                    True  # Set custom_flag to True when [custom] is found
                )
            if rule.lstrip().startswith("custom_proxy_group"):
                last_is_custom_proxy_group = True
                rvals = rule.split("=")[1].strip().split("`")
                # Remove the last element if val == ".*"
                if rvals[-1].strip() == ".*":
                    rvals.pop()
                last_val = rvals[-1].strip()
                if last_val.startswith("[]") and not last_val.startswith(
                    "[]DIRECT"
                ):
                    rvals.extend((f"[]{node_name}" for node_name in node_names))
                rule = f"custom_proxy_group={'`'.join(rvals)}\n"
            elif (
                last_is_custom_proxy_group is not None
                and last_is_custom_proxy_group
            ):
                insert_node_names_index = max(0, len(result_rules) - 1)
                last_is_custom_proxy_group = None
            result_rules.append(rule)

        # insert list `clash_a1_rules` into result_rules at `insert_node_names_index`
        result_rules[insert_node_names_index:insert_node_names_index] = (
            clash_a1_rules
        )

    with open(custom_clash_opt_cfg, "w", encoding="utf-8") as f:
        # write string cache
        string_buffer = io.StringIO()
        string_buffer.write(";Auto generated by tools/generate.py\n")
        string_buffer.write(";Do not edit this file manually\n")
        string_buffer.writelines(result_rules)

        content = string_buffer.getvalue()
        string_buffer.close()
        # replace string
        content = content.replace("Aethersailor", "pzyyll")
        content = content.replace(
            "Custom_Direct.list", "Custom_Direct_Full.list"
        )
        content = content.replace("Custom_Proxy.list", "Custom_Proxy_Full.list")

        f.writelines(content)
